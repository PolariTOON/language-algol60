'.source.algol60':
  'if … then …':
    'prefix': 'if'
    'body': 'if ${1:condition} then ${2:begin\n\t$3\nend}$4'
    'description': 'if-then construct'
    'rightLabelHTML': 'if … then …'
  'then …':
    'prefix': 'then'
    'body': 'then ${1:begin\n\t$2\nend}$3'
    'description': 'then branch'
    'rightLabelHTML': 'then …'
  'else …':
    'prefix': 'else'
    'body': 'else ${1:begin\n\t$2\nend}$3'
    'description': 'else branch'
    'rightLabelHTML': 'else …'
  'else if … then …':
    'prefix': 'elif'
    'body': 'else if ${1:condition} then ${2:begin\n\t$3\nend}$4'
    'description': 'else-if branch'
    'rightLabelHTML': 'else if … then …'
  'for … := … do …':
    'prefix': 'loop'
    'body': 'for ${1:indexName} := ${2:indexValue} do ${3:begin\n\t$4\nend}$5'
    'description': 'loop'
    'rightLabelHTML': 'for … := … do …'
  'for … := … while … do …':
    'prefix': 'while'
    'body': 'for ${1:indexName} := ${2:indexValue} while ${3:condition} do ${4:begin\n\t$5\nend}$6'
    'description': 'while loop'
    'rightLabelHTML': 'for … := … while … do …'
  'while …':
    'prefix': 'test'
    'body': 'while ${1:condition}$2'
    'description': 'while loop test'
    'rightLabelHTML': 'while … '
  'for … := … step … until … do …':
    'prefix': 'for'
    'body': 'for ${1:indexName} := ${2:min} step ${3:increment} until ${4:max} do ${5:begin\n\t$6\nend}$7'
    'description': 'for loop'
    'rightLabelHTML': 'for … := … step … until … do …'
  '… step … until …':
    'prefix': 'range'
    'body': '${1:min} step ${2:increment} until ${3:max}$4'
    'description': 'for loop range'
    'rightLabelHTML': '… step … until …'
  'do …':
    'prefix': 'do'
    'body': 'do ${1:begin\n\t$2\nend}$3'
    'description': 'loop body'
    'rightLabelHTML': 'do …'
  'go to …':
    'prefix': 'goto'
    'body': 'go to ${1:labelName}$2'
    'description': 'jump'
    'rightLabelHTML': 'go to …'
  'begin … end':
    'prefix': 'begin'
    'body': 'begin\n\t$1\nend$2'
    'description': 'begin statement'
    'rightLabelHTML': 'begin … end'
  'Boolean …;':
    'prefix': 'Boolean'
    'body': 'Boolean ${1:variableName};$2'
    'description': 'boolean declaration'
    'rightLabelHTML': 'Boolean …;'
  'integer …;':
    'prefix': 'integer'
    'body': 'integer ${1:variableName};$2'
    'description': 'integer declaration'
    'rightLabelHTML': 'integer …;'
  'real …;':
    'prefix': 'real'
    'body': 'real ${1:variableName};$2'
    'description': 'real declaration'
    'rightLabelHTML': 'real …;'
  'array …[… : …];':
    'prefix': 'array'
    'body': 'array ${1:variableName}[${2:min} : ${3:max}];$4'
    'description': 'array declaration'
    'rightLabelHTML': 'array …[… : …];'
  'switch … := …;':
    'prefix': 'switch'
    'body': 'switch ${1:switchName} := ${2:labelName};$3'
    'description': 'switch declaration'
    'rightLabelHTML': 'switch … := …;'
  'procedure …(…); value …; …;':
    'prefix': 'procedure'
    'body': 'procedure ${1:procedureName}${2:(${3:parameterName})};\n${4:value ${5:parameterName};\n}${6:${7:real} ${8:parameterName};\n}${9:begin\n\t${10}\nend};${11}'
    'description': 'procedure declaration'
    'rightLabelHTML': 'procedure …(…); value …; …;'
  'value …;':
    'prefix': 'value'
    'body': 'value ${1:parameterName};$2'
    'description': 'value declaration'
    'rightLabelHTML': 'value …;'
  'abs(…)':
    'prefix': 'abs'
    'body': 'abs(${1:E})$2'
    'rightLabelHTML': 'abs(E:real):real'
  'arctan(…)':
    'prefix': 'arctan'
    'body': 'arctan(${1:E})$2'
    'rightLabelHTML': 'arctan(E:real):real'
  'cos(…)':
    'prefix': 'cos'
    'body': 'cos(${1:E})$2'
    'rightLabelHTML': 'cos(E:real):real'
  'entier(…)':
    'prefix': 'entier'
    'body': 'entier(${1:E})$2'
    'rightLabelHTML': 'entier(E:real):integer'
  'epsilon':
    'prefix': 'epsilon'
    'body': 'epsilon$1'
    'rightLabelHTML': 'epsilon():real'
  'exp(…)':
    'prefix': 'exp'
    'body': 'exp(${1:E})$2'
    'rightLabelHTML': 'exp(E:real):real'
  'fault(…, …)':
    'prefix': 'fault'
    'body': 'fault(${1:str}, ${2:r})$3'
    'rightLabelHTML': 'fault(str:string, r:real)'
  'iabs(…)':
    'prefix': 'iabs'
    'body': 'iabs(${1:E})$2'
    'rightLabelHTML': 'iabs(E:integer):integer'
  'inchar(…, …, …)':
    'prefix': 'inchar'
    'body': 'inchar(${1:channel}, ${2:str}, ${3:int})$4'
    'rightLabelHTML': 'inchar(channel:integer, str:string, int:integer)'
  'ininteger(…)':
    'prefix': 'ininteger'
    'body': 'ininteger(${1:channel}, ${2:int})$3'
    'rightLabelHTML': 'ininteger(channel:integer, int:integer)'
  'inreal(…)':
    'prefix': 'inreal'
    'body': 'inreal(${1:channel}, ${2:re})$3'
    'rightLabelHTML': 'inreal(channel:integer, re:real)'
  'length(…)':
    'prefix': 'length'
    'body': 'length(${1:str})$2'
    'rightLabelHTML': 'length(str:string):integer'
  'ln(…)':
    'prefix': 'ln'
    'body': 'ln(${1:E})$2'
    'rightLabelHTML': 'ln(E:real):real'
  'maxint':
    'prefix': 'maxint'
    'body': 'maxint$1'
    'rightLabelHTML': 'maxint():integer'
  'maxreal':
    'prefix': 'maxreal'
    'body': 'maxreal$1'
    'rightLabelHTML': 'maxreal():real'
  'minreal':
    'prefix': 'minreal'
    'body': 'minreal$1'
    'rightLabelHTML': 'minreal():real'
  'outchar(…, …, …)':
    'prefix': 'outchar'
    'body': 'outchar(${1:channel}, ${2:str}, ${3:int})$4'
    'rightLabelHTML': 'outchar(channel:integer, str:string, int:integer)'
  'outinteger(…)':
    'prefix': 'outinteger'
    'body': 'outinteger(${1:channel}, ${2:int})$2'
    'rightLabelHTML': 'outinteger(channel:integer, int:integer)'
  'outreal(…)':
    'prefix': 'outreal'
    'body': 'outreal(${1:channel}, ${2:re})$2'
    'rightLabelHTML': 'outreal(channel:integer, re:real)'
  'outstring(…)':
    'prefix': 'outstring'
    'body': 'outstring(${1:channel}, ${2:str})$3'
    'rightLabelHTML': 'outstring(channel:integer, str:string)'
  'outterminator(…)':
    'prefix': 'outterminator'
    'body': 'outterminator(${1:channel})$2'
    'rightLabelHTML': 'outterminator(channel:integer)'
  'sign(…)':
    'prefix': 'sign'
    'body': 'sign(${1:E})$2'
    'rightLabelHTML': 'sign(E:real):integer'
  'sin(…)':
    'prefix': 'sin'
    'body': 'sin(${1:E})$2'
    'rightLabelHTML': 'sin(E:real):real'
  'sqrt(…)':
    'prefix': 'sqrt'
    'body': 'sqrt(${1:E})$2'
    'rightLabelHTML': 'sqrt(E:real):real'
  'stop':
    'prefix': 'stop'
    'body': 'stop$1'
    'rightLabelHTML': 'stop()'
