'.source.algol60':
  'comment …;':
    'prefix' : 'comment'
    'body': 'comment $1;$2'
    'description': 'comment'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--algol60">comment</span> …<span class="syntax--punctuation syntax--separator syntax--semicolon syntax--algol60">;</span>'
  'if … then …':
    'prefix': 'if'
    'body': 'if ${1:condition} then ${2:begin\n\t$3\nend}$4'
    'description': 'if-then construct'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--algol60">if</span> … <span class="syntax--keyword syntax--control syntax--algol60">then</span> …'
  'then …':
    'prefix': 'then'
    'body': 'then ${1:begin\n\t$2\nend}$3'
    'description': 'then branch'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--algol60">then</span> …'
  'else …':
    'prefix': 'else'
    'body': 'else ${1:begin\n\t$2\nend}$3'
    'description': 'else branch'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--algol60">else</span> …'
  'else if … then …':
    'prefix': 'elif'
    'body': 'else if ${1:condition} then ${2:begin\n\t$3\nend}$4'
    'description': 'else-if branch'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--algol60">else</span> <span class="syntax--keyword syntax--control syntax--algol60">if</span> … <span class="syntax--keyword syntax--control syntax--algol60">then</span> …'
  'for … := … do …':
    'prefix': 'for'
    'body': 'for ${1:indexName} := ${2:indexValue} do ${3:begin\n\t$4\nend}$5'
    'description': 'loop'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--algol60">for</span> … <span class="syntax--keyword syntax--operator syntax--assignment syntax--algol60">:=</span> … <span class="syntax--keyword syntax--control syntax--algol60">do</span> …'
  '… while …':
    'prefix': 'test'
    'body': '${1:indexValue} while ${2:condition}$3'
    'description': 'loop test'
    'rightLabelHTML': '… <span class="syntax--keyword syntax--control syntax--algol60">while</span> … '
  '… step … until …':
    'prefix': 'range'
    'body': '${1:min} step ${2:increment} until ${3:max}$4'
    'description': 'loop range'
    'rightLabelHTML': '… <span class="syntax--keyword syntax--control syntax--algol60">step</span> … <span class="syntax--keyword syntax--control syntax--algol60">until</span> …'
  'do …':
    'prefix': 'do'
    'body': 'do ${1:begin\n\t$2\nend}$3'
    'description': 'loop body'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--algol60">do</span> …'
  'go to …':
    'prefix': 'goto'
    'body': 'go to ${1:labelName}$2'
    'description': 'jump'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--algol60">go</span> <span class="syntax--keyword syntax--control syntax--algol60">to</span> …'
  'begin … end':
    'prefix': 'begin'
    'body': 'begin\n\t$1\nend$2'
    'description': 'begin statement'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--algol60">begin</span> … <span class="syntax--keyword syntax--control syntax--algol60">end</span>'
  'Boolean …;':
    'prefix': 'Boolean'
    'body': 'Boolean ${1:variableName};$2'
    'description': 'boolean declaration'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--algol60">Boolean</span> …<span class="syntax--punctuation syntax--separator syntax--semicolon syntax--algol60">;</span>'
  'integer …;':
    'prefix': 'integer'
    'body': 'integer ${1:variableName};$2'
    'description': 'integer declaration'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--algol60">integer</span> …<span class="syntax--punctuation syntax--separator syntax--semicolon syntax--algol60">;</span>'
  'real …;':
    'prefix': 'real'
    'body': 'real ${1:variableName};$2'
    'description': 'real declaration'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--algol60">real</span> …<span class="syntax--punctuation syntax--separator syntax--semicolon syntax--algol60">;</span>'
  'array …[… : …];':
    'prefix': 'array'
    'body': 'array ${1:variableName}[${2:min} : ${3:max}];$4'
    'description': 'array declaration'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--algol60">array</span> …<span class="syntax--meta syntax--brace syntax--square syntax--algol60">[</span>… <span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span> …<span class="syntax--meta syntax--brace syntax--curly syntax--algol60">]</span><span class="syntax--punctuation syntax--separator syntax--semicolon syntax--algol60">;</span>'
  'switch … := …;':
    'prefix': 'switch'
    'body': 'switch ${1:switchName} := ${2:labelName};$3'
    'description': 'switch declaration'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--algol60">switch</span> … <span class="syntax--keyword syntax--operator syntax--assignment syntax--algol60">:=</span> …<span class="syntax--punctuation syntax--separator syntax--semicolon syntax--algol60">;</span>'
  'procedure …(…); value …; …;':
    'prefix': 'procedure'
    'body': 'procedure ${1:procedureName}${2:(${3:parameterName})}; ${4:value ${5:parameterName}; }${6:${7:real} ${8:parameterName}; }${9:begin\n\t${10}\nend};${11}'
    'description': 'procedure declaration'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--algol60">procedure</span> …<span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span>…<span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span><span class="syntax--punctuation syntax--separator syntax--semicolon syntax--algol60">;</span> <span class="syntax--keyword syntax--control syntax--algol60">value</span> …; …<span class="syntax--punctuation syntax--separator syntax--semicolon syntax--algol60">;</span>'
  'value …;':
    'prefix': 'value'
    'body': 'value ${1:parameterName};$2'
    'description': 'value declaration'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--algol60">value</span> …<span class="syntax--punctuation syntax--separator syntax--semicolon syntax--algol60">;</span>'
  'abs(…)':
    'prefix': 'abs'
    'body': 'abs(${1:E})$2'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">abs</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--algol60">E</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--re syntax--algol60">real</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--re syntax--algol60">real</span>'
  'arctan(…)':
    'prefix': 'arctan'
    'body': 'arctan(${1:E})$2'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">arctan</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--algol60">E</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--re syntax--algol60">real</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--re syntax--algol60">real</span>'
  'cos(…)':
    'prefix': 'cos'
    'body': 'cos(${1:E})$2'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">cos</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--algol60">E</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--re syntax--algol60">real</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--re syntax--algol60">real</span>'
  'entier(…)':
    'prefix': 'entier'
    'body': 'entier(${1:E})$2'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">entier</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--algol60">E</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--re syntax--algol60">real</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--int syntax--algol60">integer</span>'
  'epsilon':
    'prefix': 'epsilon'
    'body': 'epsilon$1'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">epsilon</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--re syntax--algol60">real</span>'
  'exp(…)':
    'prefix': 'exp'
    'body': 'exp(${1:E})$2'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">exp</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--algol60">E</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--re syntax--algol60">real</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--re syntax--algol60">real</span>'
  'fault(…, …)':
    'prefix': 'fault'
    'body': 'fault(${1:str}, ${2:r})$3'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">fault</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--algol60">str</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--str syntax--algol60">string</span>, <span class="syntax--variable syntax--other syntax--identifier syntax--algol60">r</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--re syntax--algol60">real</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span>'
  'iabs(…)':
    'prefix': 'iabs'
    'body': 'iabs(${1:E})$2'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">iabs</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--algol60">E</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--int syntax--algol60">integer</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--int syntax--algol60">integer</span>'
  'inchar(…, …, …)':
    'prefix': 'inchar'
    'body': 'inchar(${1:channel}, ${2:str}, ${3:int})$4'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">inchar</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--algol60">channel</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--int syntax--algol60">integer</span>, <span class="syntax--variable syntax--other syntax--identifier syntax--algol60">str</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--str syntax--algol60">string</span>, <span class="syntax--variable syntax--other syntax--identifier syntax--algol60">int</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--int syntax--algol60">integer</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span>'
  'ininteger(…)':
    'prefix': 'ininteger'
    'body': 'ininteger(${1:channel}, ${2:int})$3'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">ininteger</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--algol60">channel</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--int syntax--algol60">integer</span>, <span class="syntax--variable syntax--other syntax--identifier syntax--algol60">int</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--int syntax--algol60">integer</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span>'
  'inreal(…)':
    'prefix': 'inreal'
    'body': 'inreal(${1:channel}, ${2:re})$3'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">inreal</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--algol60">channel</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--int syntax--algol60">integer</span>, <span class="syntax--variable syntax--other syntax--identifier syntax--algol60">re</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--re syntax--algol60">real</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span>'
  'length(…)':
    'prefix': 'length'
    'body': 'length(${1:str})$2'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">length</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--algol60">str</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--str syntax--algol60">string</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--int syntax--algol60">integer</span>'
  'ln(…)':
    'prefix': 'ln'
    'body': 'ln(${1:E})$2'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">ln</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--algol60">E</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--re syntax--algol60">real</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--re syntax--algol60">real</span>'
  'maxint':
    'prefix': 'maxint'
    'body': 'maxint$1'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">maxint</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--int syntax--algol60">integer</span>'
  'maxreal':
    'prefix': 'maxreal'
    'body': 'maxreal$1'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">maxreal</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--re syntax--algol60">real</span>'
  'minreal':
    'prefix': 'minreal'
    'body': 'minreal$1'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">minreal</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--re syntax--algol60">real</span>'
  'outchar(…, …, …)':
    'prefix': 'outchar'
    'body': 'outchar(${1:channel}, ${2:str}, ${3:int})$4'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">outchar</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--algol60">channel</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--int syntax--algol60">integer</span>, <span class="syntax--variable syntax--other syntax--identifier syntax--algol60">str</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--str syntax--algol60">string</span>, <span class="syntax--variable syntax--other syntax--identifier syntax--algol60">int</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--int syntax--algol60">integer</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span>'
  'outinteger(…)':
    'prefix': 'outinteger'
    'body': 'outinteger(${1:channel}, ${2:int})$2'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">outinteger</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--algol60">channel</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--int syntax--algol60">integer</span>, <span class="syntax--variable syntax--other syntax--identifier syntax--algol60">int</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--int syntax--algol60">integer</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span>'
  'outreal(…)':
    'prefix': 'outreal'
    'body': 'outreal(${1:channel}, ${2:re})$2'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">outreal</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--algol60">channel</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--int syntax--algol60">integer</span>, <span class="syntax--variable syntax--other syntax--identifier syntax--algol60">re</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--re syntax--algol60">real</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span>'
  'outstring(…)':
    'prefix': 'outstring'
    'body': 'outstring(${1:channel}, ${2:str})$3'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">outstring</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--algol60">channel</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--int syntax--algol60">integer</span>, <span class="syntax--variable syntax--other syntax--identifier syntax--algol60">str</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--str syntax--algol60">string</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span>'
  'outterminator(…)':
    'prefix': 'outterminator'
    'body': 'outterminator(${1:channel})$2'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">outterminator</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--algol60">channel</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--int syntax--algol60">integer</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span>'
  'sign(…)':
    'prefix': 'sign'
    'body': 'sign(${1:E})$2'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">sign</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--algol60">E</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--re syntax--algol60">real</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--int syntax--algol60">integer</span>'
  'sin(…)':
    'prefix': 'sin'
    'body': 'sin(${1:E})$2'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">sin</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--algol60">E</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--re syntax--algol60">real</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--re syntax--algol60">real</span>'
  'sqrt(…)':
    'prefix': 'sqrt'
    'body': 'sqrt(${1:E})$2'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">sqrt</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--algol60">E</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--re syntax--algol60">real</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--algol60">:</span><span class="syntax--storage syntax--type syntax--re syntax--algol60">real</span>'
  'stop':
    'prefix': 'stop'
    'body': 'stop$1'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--algol60">stop</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">(</span><span class="syntax--meta syntax--brace syntax--round syntax--algol60">)</span>'
